// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Implements the Intelligent Anomaly Detection AI flow to identify unusual spending patterns.
 *
 * - detectAnomalies - Analyzes spending data to detect anomalies and potential financial stress.
 * - DetectAnomaliesInput - The input type for the detectAnomalies function.
 * - DetectAnomaliesOutput - The return type for the detectAnomalies function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectAnomaliesInputSchema = z.object({
  spendingData: z.string().describe('A JSON string containing the user\'s recent spending data, including categories, amounts, and dates.'),
  userProfile: z.string().describe('A JSON string containing user profile information, including typical spending habits, income, and financial goals.'),
});
export type DetectAnomaliesInput = z.infer<typeof DetectAnomaliesInputSchema>;

const DetectAnomaliesOutputSchema = z.object({
  anomalies: z.array(
    z.object({
      category: z.string().describe('The spending category where the anomaly was detected.'),
      amount: z.number().describe('The amount of the anomalous spending.'),
      date: z.string().describe('The date of the anomalous spending.'),
      reason: z.string().describe('The reason why the spending is considered anomalous, including potential stress or fraud.'),
      recommendation: z.string().describe('A recommendation to address the anomaly, such as contacting the bank or reducing spending in the category.'),
    })
  ).describe('An array of detected spending anomalies.'),
  summary: z.string().describe('A summary of the detected anomalies and their potential impact on the user\'s finances.'),
});
export type DetectAnomaliesOutput = z.infer<typeof DetectAnomaliesOutputSchema>;

export async function detectAnomalies(input: DetectAnomaliesInput): Promise<DetectAnomaliesOutput> {
  return detectAnomaliesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectAnomaliesPrompt',
  input: {schema: DetectAnomaliesInputSchema},
  output: {schema: DetectAnomaliesOutputSchema},
  prompt: `You are an AI financial advisor that specializes in detecting anomalies and potentially fraudulent activity in user spending data.

You are provided with the user's recent spending data and their profile.

Spending Data: {{{spendingData}}}
User Profile: {{{userProfile}}}

Analyze the spending data and user profile to identify any anomalies, considering the user's typical spending habits, income, and financial goals.

Pay close attention to unusually high spending amounts, deviations from typical spending categories, and any patterns that may indicate financial stress or fraud.

Provide a clear explanation for each anomaly, including the potential reason for the anomaly and a recommendation to address it.

Output the identified anomalies as a JSON array, along with a summary of the detected anomalies and their potential impact on the user's finances.

Make sure the JSON is parseable.
`, 
});

const detectAnomaliesFlow = ai.defineFlow(
  {
    name: 'detectAnomaliesFlow',
    inputSchema: DetectAnomaliesInputSchema,
    outputSchema: DetectAnomaliesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
